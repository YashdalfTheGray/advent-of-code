// This file is generated by the setup script located in the utils folder in the repository root.
// Day 6
// https://adventofcode.com/2015/day/6
// input: day6/input.txt

const day6Input = (await Deno.readTextFile('input.txt'))
  .split('\n')
  .filter((l) => !!l);

const parseCommand = (command: string) => {
  const matches = command.match(/(.*) (\d+),(\d+) through (\d+),(\d+)/)!;
  return {
    action: matches[1],
    start: [
      Math.min(parseInt(matches[2]), parseInt(matches[4])),
      Math.min(parseInt(matches[3]), parseInt(matches[5])),
    ],
    end: [
      Math.max(parseInt(matches[2]), parseInt(matches[4])),
      Math.max(parseInt(matches[3]), parseInt(matches[5])),
    ],
  };
};

const part1 = (input: string[]) => {
  const lightGrid = new Array(1000).fill(0).map(() => new Array(1000).fill(0));

  input.map(parseCommand).forEach(({ action, start, end }) => {
    for (let x = start[0]; x <= end[0]; x++) {
      for (let y = start[1]; y <= end[1]; y++) {
        switch (action) {
          case 'turn on':
            lightGrid[x][y] = 1;
            break;
          case 'turn off':
            lightGrid[x][y] = 0;
            break;
          case 'toggle':
            lightGrid[x][y] = lightGrid[x][y] === 0 ? 1 : 0;
            break;
          default:
            throw new Error(`Unknown action: ${action}`);
        }
      }
    }
  });

  return lightGrid.reduce(
    (acc, row) => acc + row.reduce((acc, cell) => acc + cell, 0),
    0
  );
};

const part2 = (input: string[]) => {
  const lightGrid = new Array(1000).fill(0).map(() => new Array(1000).fill(0));

  input.map(parseCommand).forEach(({ action, start, end }) => {
    for (let x = start[0]; x <= end[0]; x++) {
      for (let y = start[1]; y <= end[1]; y++) {
        switch (action) {
          case 'turn on':
            lightGrid[x][y] += 1;
            break;
          case 'turn off':
            lightGrid[x][y] -= 1;
            if (lightGrid[x][y] < 0) {
              lightGrid[x][y] = 0;
            }
            break;
          case 'toggle':
            lightGrid[x][y] += 2;
            break;
          default:
            throw new Error(`Unknown action: ${action}`);
        }
      }
    }
  });

  return lightGrid.reduce(
    (acc, row) => acc + row.reduce((acc, cell) => acc + cell, 0),
    0
  );
};

export { day6Input, parseCommand, part1, part2 };
