import Language from './Language.ts';

export default class Ruby implements Language {
  public static language = ['ruby', 'rb'];

  private extension = 'rb';
  private solutionFilePath: string;
  private testFilePath: string;

  constructor(private year: number, private day: number) {
    this.solutionFilePath = `${this.year}/day${this.day}/solution.${this.extension}`;
    this.testFilePath = `${this.year}/day${this.day}/solution.spec.${this.extension}`;
  }

  public getSolutionRootPath(): string {
    return `${this.year}/day${this.day}`;
  }

  public getSetupCommand(): string[] {
    return ['mkdir', '-p', this.getSolutionRootPath()];
  }

  public getPostInstallCommand(): string[] {
    return [];
  }

  public getFileNames(): {
    [key: string]: string;
    inputFile: string;
    solutionFile: string;
  } {
    return {
      inputFile: `${this.year}/day${this.day}/input.txt`,
      solutionFile: this.solutionFilePath,
      testFile: this.testFilePath,
    };
  }

  public getFileContents(path: string): string {
    if (path === this.solutionFilePath) {
      return this.getSolutionFileContents();
    } else if (path === this.testFilePath) {
      return this.getTestFileContents();
    } else {
      throw new Error(`Unknown path: ${path}`);
    }
  }

  private getSolutionFileContents(): string {
    return `
# frozen_string_literal: true

# This file is generated by the setup script located in the utils folder in the repository root.
# Day 1
# https://adventofcode.com/2022/day/1
# input: day1/input.txt

# Solution just contains the input read in
module Solution
  INPUT = File.read('input.txt').split("\\n").reject(&:empty?)
end

puts Solution::INPUT
    `
      .trim()
      .concat('\n');
  }

  private getTestFileContents(): string {
    return `
# frozen_string_literal: true

# This file is generated by the setup script located in the utils folder in the repository root.
# Run the tests using ruby solution_test.rb

require 'test/unit'

require_relative './solution'

# SanityTest just sanity tests the input
class SanityTest < Test::Unit::TestCase
  def test_input_not_nil
    assert_not_nil(Solution::INPUT)
  end
end
    `
      .trim()
      .concat('\n');
  }
}
