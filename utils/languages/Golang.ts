import Language from './Language.ts';

export default class Golang implements Language {
  public static language = ['golang', 'go'];

  private extension = 'go';
  private solutionFilePath: string;

  constructor(private year: number, private day: number) {
    this.solutionFilePath = `${this.year}/day${this.day}/solution.${this.extension}`;
  }

  public getSolutionRootPath(): string {
    return `${this.year}/day${this.day}`;
  }
  public getSetupCommand(): string[] {
    return ['mkdir', '-p', this.getSolutionRootPath()];
  }
  public getFileNames(): {
    [key: string]: string;
    inputFile: string;
    solutionFile: string;
  } {
    return {
      inputFile: `${this.year}/day${this.day}/input.txt`,
      solutionFile: this.solutionFilePath,
    };
  }
  public getFileContents(path: string): string {
    if (path === this.solutionFilePath) {
      return this.getSolutionFileContents();
    } else {
      throw new Error(`Unknown path: ${path}`);
    }
  }

  private getSolutionFileContents(): string {
    return `
// This file is generated by the setup script located in the utils folder in the repository root.
// Day ${this.day}
// https://adventofcode.com/${this.year}/day/${this.day}
// input: day${this.day}/input.txt

package main

import (
	"bufio"
	"fmt"
	"os"
)

func readLines(path string) ([]string, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)

	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}

	return lines, scanner.Err()
}

func main() {
	lines, err := readLines("input.txt")
	if err != nil {
		fmt.Println("error reading file:", err)
	}

	for _, line := range lines {
		fmt.Println(line)
	}
}
    `
      .trim()
      .concat('\n');
  }
}
