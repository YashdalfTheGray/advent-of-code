// This file is generated by the create-files script in ../utils.
// Day 22 part 1
// https://adventofcode.com/2021/day/22
// input: day22/input.txt

import { assert } from 'https://deno.land/std@0.118.0/testing/asserts.ts';

type Range1D = { min: number; max: number };
type CuboidBounds = [
  xmin: number,
  xmax: number,
  ymin: number,
  ymax: number,
  zmin: number,
  zmax: number
];

class Cuboid {
  public state: boolean;
  private x: Range1D;
  private y: Range1D;
  private z: Range1D;

  constructor(input: string) {
    const splitInput = input.split(' ');
    this.state = splitInput[0] === 'on';
    const [xrangeStr, yrangeStr, zrangeStr] = splitInput[1].split(',');

    this.x = this.translateRangeStringIntoRange1D(xrangeStr);
    this.y = this.translateRangeStringIntoRange1D(yrangeStr);
    this.z = this.translateRangeStringIntoRange1D(zrangeStr);
  }

  public get bounds(): CuboidBounds {
    return [
      this.x.min,
      this.x.max,
      this.y.min,
      this.y.max,
      this.z.min,
      this.z.max,
    ];
  }

  private translateRangeStringIntoRange1D(range: string): Range1D {
    const splitRange = range.split('=');
    const [min, max] = splitRange[1].split('..').map(Number);
    assert(min < max, 'range min is higher than range max');
    return { min, max };
  }
}

class Point {
  public static encode(x: number, y: number, z: number): string {
    return `(${x},${y},${z})`;
  }

  public static decode(point: string): [number, number, number] {
    const [x, y, z] = point.slice(1, -1).split(',').map(Number);
    return [x, y, z];
  }
}

const d22p1Input = (await Deno.readTextFile('day22/input.txt'))
  .split('\n')
  .filter((l) => !!l);

const gridMap = new Map<string, boolean>();
const cuboids = d22p1Input
  .map((l) => new Cuboid(l))
  .filter((c) => c.bounds.every((b) => Math.abs(b) <= 50));

console.log(cuboids);
