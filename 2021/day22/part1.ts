// This file is generated by the create-files script in ../utils.
// Day 22 part 1
// https://adventofcode.com/2021/day/22
// input: day22/input.txt

import { assert } from 'https://deno.land/std@0.118.0/testing/asserts.ts';

type Range1D = { min: number; max: number };
type CuboidBounds = [
  xmin: number,
  xmax: number,
  ymin: number,
  ymax: number,
  zmin: number,
  zmax: number
];

class Cuboid {
  public state: boolean;
  private x: Range1D;
  private y: Range1D;
  private z: Range1D;

  constructor(input: string) {
    const splitInput = input.split(' ');
    this.state = splitInput[0] === 'on';
    const [xrangeStr, yrangeStr, zrangeStr] = splitInput[1].split(',');

    this.x = this.translateRangeStringIntoRange1D(xrangeStr);
    this.y = this.translateRangeStringIntoRange1D(yrangeStr);
    this.z = this.translateRangeStringIntoRange1D(zrangeStr);
  }

  public get bounds(): CuboidBounds {
    return [
      this.x.min,
      this.x.max,
      this.y.min,
      this.y.max,
      this.z.min,
      this.z.max,
    ];
  }

  *[Symbol.iterator]() {
    for (let x = this.x.min; x <= this.x.max; x++) {
      for (let y = this.y.min; y <= this.y.max; y++) {
        for (let z = this.z.min; z <= this.z.max; z++) {
          yield [x, y, z];
        }
      }
    }
  }

  private translateRangeStringIntoRange1D(range: string): Range1D {
    const splitRange = range.split('=');
    const [min, max] = splitRange[1].split('..').map(Number);
    assert(min <= max, 'range min is higher than range max');
    return { min, max };
  }
}

class Point {
  public static encode(x: number, y: number, z: number): string {
    return `(${x},${y},${z})`;
  }

  public static decode(point: string): [number, number, number] {
    const [x, y, z] = point.slice(1, -1).split(',').map(Number);
    return [x, y, z];
  }
}

const testInput = `
on x=10..12,y=10..12,z=10..12
on x=11..13,y=11..13,z=11..13
off x=9..11,y=9..11,z=9..11
on x=10..10,y=10..10,z=10..10
`;

const testInput2 = `
on x=-20..26,y=-36..17,z=-47..7
on x=-20..33,y=-21..23,z=-26..28
on x=-22..28,y=-29..23,z=-38..16
on x=-46..7,y=-6..46,z=-50..-1
on x=-49..1,y=-3..46,z=-24..28
on x=2..47,y=-22..22,z=-23..27
on x=-27..23,y=-28..26,z=-21..29
on x=-39..5,y=-6..47,z=-3..44
on x=-30..21,y=-8..43,z=-13..34
on x=-22..26,y=-27..20,z=-29..19
off x=-48..-32,y=26..41,z=-47..-37
on x=-12..35,y=6..50,z=-50..-2
off x=-48..-32,y=-32..-16,z=-15..-5
on x=-18..26,y=-33..15,z=-7..46
off x=-40..-22,y=-38..-28,z=23..41
on x=-16..35,y=-41..10,z=-47..6
off x=-32..-23,y=11..30,z=-14..3
on x=-49..-5,y=-3..45,z=-29..18
off x=18..30,y=-20..-8,z=-3..13
on x=-41..9,y=-7..43,z=-33..15
on x=-54112..-39298,y=-85059..-49293,z=-27449..7877
on x=967..23432,y=45373..81175,z=27513..53682
`;

const d22p1Input = (await Deno.readTextFile('day22/input.txt'))
  .split('\n')
  .filter((l) => !!l);

const gridMap = new Map<string, boolean>();
const cuboids = d22p1Input
  .map((l) => new Cuboid(l))
  .filter((c) => c.bounds.every((b) => Math.abs(b) <= 50));

cuboids.forEach((c) => {
  [...c]
    .map(([x, y, z]) => Point.encode(x, y, z))
    .forEach((p) => {
      gridMap.set(p, c.state);
    });
});

const cubesInOnState = [...gridMap.entries()].filter(
  ([, state]) => state
).length;

console.log('\n');
console.log(
  `After initialization, ${cubesInOnState} cubes are in the on state.`
);
