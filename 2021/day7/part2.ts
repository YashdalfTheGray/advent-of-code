// This file is generated by the create-files script in ../utils.
// Day 7 part 2
// https://adventofcode.com/2021/day/7#part2
// input: day7/input.txt

import { calculateTotalFuel, mean } from './mathHelper.ts';

const d7p2Input = (await Deno.readTextFile('day7/input.txt'))
  .split(',')
  .filter((l) => !!l)
  .map((l) => parseInt(l, 10))
  .sort((a, b) => a - b);

// For part2, the fuel cost function goes up by one for each step, 1 for 1,
// 2 for 2, etc. We can generalize that to be the sum of all integers from 1
// to n for step n. Using the triangular number formula, we can find the sum
// as follows:
// n(n+1)/2 so (n) => (n * (n + 1)) / 2 will be our fuelCostFunction
const totalFuel = calculateTotalFuel(
  d7p2Input,
  Math.floor(mean(d7p2Input)),
  (n) => (n * (n + 1)) / 2
);

console.log(
  `It would take ${totalFuel} fuel to get to the most optimum position.`
);

// NOTE 2021/12/07 @YashdalfTheGray
// The `toPosition` here was found through trial and error. I don't understand
// enough statistics to know why the mean rounded down works as the answer but
// it occurs to me that it may not work for every dataset. So here are the things,
// in order, that I tried for the `toPosition` argument of the `calculateTotalFuel`:
// 1. `median(d7p2Input)`
// 2. `mean(d7p2Input)` (this came out to be a float so I started rounding)
// 3. `Math.round(mean(d7p2Input))`
// 4. `Math.ceil(mean(d7p2Input))`
// 5. `Math.floor(mean(d7p2Input))`
//
// Number 3 and number 4 produced the same, but wrong (for my dataset), answer.
