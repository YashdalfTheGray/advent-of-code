// This file is generated by the create-files script in ../utils.
// Day 7 part 1
// https://adventofcode.com/2021/day/7
// input: day7/input.txt

const calculateTotalFuel = (
  crabs: number[],
  toPosition: number,
  fuelCostFunction: (n: number) => number
) =>
  crabs.reduce(
    (groupFuel, crab) =>
      groupFuel + fuelCostFunction(Math.abs(toPosition - crab)),
    0
  );

const median = (numbers: number[]): number => {
  const middle = Math.floor(numbers.length / 2);
  return numbers.length % 2 !== 0
    ? numbers[middle]
    : (numbers[middle - 1] + numbers[middle]) / 2;
};

const d7p1Input = (await Deno.readTextFile('day7/input.txt'))
  .split(',')
  .filter((l) => !!l)
  .map((l) => parseInt(l, 10))
  .sort((a, b) => a - b);

// For part1, the fuel cost function is just 1 fuel per 1 unit
// so we can generalize that to n fuel to n steps
const totalFuel = calculateTotalFuel(d7p1Input, median(d7p1Input), (n) => n);

console.log(
  `It would take ${totalFuel} fuel to get to the most optimum position.`
);
