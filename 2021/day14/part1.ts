// This file is generated by the create-files script in ../utils.
// Day 14 part 1
// https://adventofcode.com/2021/day/14
// input: day14/input.txt

const getPairsFrom = (state: string) => {
  const pairs = [];
  const splitState = state.split('');

  while (splitState.length > 1) {
    const pairStart = splitState.shift()!;
    const pairEnd = splitState[0];
    pairs.push(pairStart + pairEnd);
  }

  return pairs;
};

const checkAndInsertElement = (
  pair: string,
  insertionMap: Map<string, string>
) => {
  const [start, end] = pair.split('');
  const insertion = insertionMap.get(pair);
  return start + (insertion ?? '') + end;
};

const applyPairInsertionRules = (
  start: string,
  insertionMap: Map<string, string>
) =>
  getPairsFrom(start)
    .map((p) => checkAndInsertElement(p, insertionMap))
    .reduce((endState, pair) => {
      if (endState.length !== 0) {
        endState.pop();
      }
      endState.push(...pair.split(''));

      return endState;
    }, [] as string[])
    .join('');

const [d14p1StartingChain, d14p1PairInsertions] = (
  await Deno.readTextFile('day14/input.txt')
)
  .split('\n\n')
  .filter((l) => !!l);
const startingChain = d14p1StartingChain.trim();
const pairInsertionMap = new Map<string, string>();

d14p1PairInsertions
  .split('\n')
  .filter((l) => !!l)
  .forEach((l) => {
    const [pair, insertion] = l.split(' -> ').map((s) => s.trim());
    pairInsertionMap.set(pair, insertion);
  });

const steps = 10;
let currentChain = startingChain;

for (let i = 0; i < steps; i++) {
  currentChain = applyPairInsertionRules(currentChain, pairInsertionMap);
}

const stats = Object.entries(
  currentChain.split('').reduce((stats, e) => {
    if (!stats[e]) {
      stats[e] = 0;
    }
    stats[e] += 1;

    return stats;
  }, {} as { [key: string]: number })
).sort((a, b) => b[1] - a[1]);

console.log('\n');
console.log(
  `The difference of the most common element and the least common element is ${
    stats[0][1] - stats[stats.length - 1][1]
  }.`
);
