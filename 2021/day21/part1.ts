// This file is generated by the create-files script in ../utils.
// Day 21 part 1
// https://adventofcode.com/2021/day/21
// input: day21/input.txt

import { assert } from 'https://deno.land/std@0.118.0/testing/asserts.ts';

enum Players {
  P1 = 1,
  P2,
}

const getNextDiceRollSum = (rollNumber: number) =>
  [1, 2, 3]
    .map((i) => rollNumber * 3 + i)
    .map((i) => i % 100 || 100)
    .reduce((s, i) => s + i);

const rollForPlayer = (start: number, rollNumber: number): number => {
  const total = getNextDiceRollSum(rollNumber);
  const unprocessedPosition = (start + total) % 10;
  return unprocessedPosition || 10;
};

const d21p1Input = (await Deno.readTextFile('day21/input.txt'))
  .split('\n')
  .filter((l) => !!l);

const [p1Start, p2Start] = d21p1Input.map((l) => l.split(': ')[1].trim());

const p1 = { id: Players.P1, position: Number(p1Start), score: 0 };
const p2 = { id: Players.P2, position: Number(p2Start), score: 0 };

let rollNumber = 0;
let currentPlayer = p1;

while (true) {
  currentPlayer.position = rollForPlayer(currentPlayer.position, rollNumber);
  currentPlayer.score += currentPlayer.position;
  rollNumber += 1;
  if (currentPlayer.score >= 1000) {
    break;
  }
  currentPlayer = currentPlayer === p1 ? p2 : p1;
}

// We assert this so that we can flip to the other place to
// calculate the value that we need to turn into AoC.
assert(currentPlayer.score >= 1000);
currentPlayer = currentPlayer === p1 ? p2 : p1;

console.log('\n');
console.log(
  `The score of the losing player (P${currentPlayer.id}) is ${
    currentPlayer.score
  } and there have been ${rollNumber * 3} rolls.`
);
console.log(`The product is ${rollNumber * 3 * currentPlayer.score}.`);
