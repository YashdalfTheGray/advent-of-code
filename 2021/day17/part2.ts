// This file is generated by the create-files script in ../utils.
// Day 17 part 2
// https://adventofcode.com/2021/day/17#part2
// input: day17/input.txt

type TargetZone = [number, number, number, number];

const tr = (n: number): number => (n * (n + 1)) / 2;

const checkForHit = (vx: number, vy: number, target: TargetZone): boolean => {
  const [xmin, xmax, ymin, ymax] = target;

  let px = 0;
  let py = 0;

  while (true) {
    if (xmin <= px && px <= xmax && ymin <= py && py <= ymax) {
      return true;
    } else if (px > xmax || py < ymin) {
      return false;
    }

    px += vx;
    py += vy;
    vx = vx + vx > 0 ? -1 : 1;
    vy -= 1;
  }
};

const d17p2Input = (await Deno.readTextFile('day17/input.txt'))
  .split('\n')
  .filter((l) => !!l);

/*
  this regular expression is a bit wild so lets talk about it
  it basically models the string more strictly than is necessary
  as it makes sure that "target area: x=" start the string, the
  `\s` match single whitespaces. The `(-?\d*)` match any number
  of digits, potentially with a preceding minus sign. We do that
  once right after the "x=" and then again after the "y=".
*/
const [_, xmin, xmax, ymin, ymax] =
  /^target\sarea:\sx=(-?\d*)..(-?\d*),\sy=(-?\d*)..(-?\d*)$/
    .exec(d17p2Input[0])!
    .map((s) => parseInt(s, 10));

/*
  Reasonably, the max starting velocities for x can't be greater than
  the xmax value because otherwise, we'll shoot past immediately. This
  also stands true for y except for we need to account for negative
  velocities too in the y case. So |vy| <= ymin and vx <= xmax which
  gives us the max velocities for y and x. We just need a function to
  make sure that we can hit the target area given starting velocities.

  An additional constraint that we can put on the minimum x velocity is
  that it needs to be high enough that it meets the left edge of the
  target field. But if we launch with a particular velocity, vxi, and
  the vx(s), the x velocity at each step is given by vx(s) = vxi - s,
  we can see that the x position at each step will be given by
  x(s) = s(s+1)/2.
*/

const target: TargetZone = [xmin, xmax, ymin, ymax];
const vymax = Math.abs(ymin);
const vymin = -vymax;
const vxmax = Math.abs(xmax);
const vxmin = (() => {
  let ret = 1;
  while (tr(ret) < xmin) {
    ret++;
  }
  return ret;
})();

const potentials = [];

for (let vx = vxmin; vx <= vxmax; vx++) {
  for (let vy = vymin; vy <= vymax; vy++) {
    if (checkForHit(vx, vy, target)) {
      potentials.push([vx, vy]);
    }
  }
}

console.log('\n');
console.log(
  `There are ${potentials.length} potential velocities that will hit the target area.`
);
