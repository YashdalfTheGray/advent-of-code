// This file is generated by the create-files script in ../utils.
// Day 17 part 1
// https://adventofcode.com/2021/day/17
// input: day17/input.txt

const d17p1Input = (await Deno.readTextFile('day17/input.txt'))
  .split('\n')
  .filter((l) => !!l);

/*
  this regular expression is a bit wild so lets talk about it
  it basically models the string more strictly than is necessary
  as it makes sure that "target area: x=" start the string, the
  `\s` match single whitespaces. The `(-?\d*)` match any number
  of digits, potentially with a preceding minus sign. We do that
  once right after the "x=" and then again after the "y=".
*/
const matches = /^target\sarea:\sx=(-?\d*)..(-?\d*),\sy=(-?\d*)..(-?\d*)$/.exec(
  d17p1Input[0]
)!;

// matches looks like [full_string, xmin, xmax, ymin, ymax]
const ymin = parseInt(matches[3]);

/*
  Intuitively thinking about this problem, the problem statement states
  that the x velocity and the y velocity are unrelated to each other,
  that is, they change independent of each other, only as a function of
  step. This allows us to ignore the x position and velocity entirely
  for this part.

  To find the highest y position it reaches, we should maximize the y velocity,
  which will be called vy from now on. So we need to find vy such that we
  reach the highest point and also hit the target area on the way down.

  Additionally, we also know that since vy is only being affected by gravity,
  the y position looks like an upside down parabola that intersects the y = 0
  horizontal line twice, once when we start and once again when it comes down
  after being shot up.

  The first derivative of the position is velocity and we can also see that
  |vy| is the same for the both trajectory interersections with y = 0, just
  the direction is opposite. To have the highest possible position, we need
  the highest possible speed and the highest possible speed we can have after
  the second trajectory intersection with y = 0 is to get from y = 0 to
  y = (bottom of target range) in one step. So that means, we need to get from
  y = 0 to y = ymin in one step. This means that our speed at the second y = 0
  intersection will need to be |ymin| = ymin.

  Going back to the our deduction that the speed at the two y = 0 intersections
  is the same, we can see that the maximum speed we can have is |ymin| units per
  step. Since the first intersection of the trajectory and y = 0 is at launch,
  we should launch with vy = |ymin| to get the highest possible y position.

  To calculate the highest position, we need to figure out the point where
  vy = 0. To get to this point, since the velocity decreases by 1 with each step,
  we have to sum up all the steps until vy(step) = 0. This means, we need to sum
  up |ymin| + |ymin| - 1 + |ymin| - 2 + ... + 2 + 1 + 0. This can also be written
  as the sum of consecutive integers from 0 to |ymin|, which can be expressed as
  (|ymin| * (|ymin| + 1)) / 2.
*/

console.log('\n');
console.log(
  `The highest position the probe can reach is ${(ymin * (ymin + 1)) / 2}`
);
